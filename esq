#!/bin/bash
VERSION="0.1"
## variables to be moved to .env file
source ~/.es-query/.env

## enable bash completion
# not sure if it works out of the bash-completion normal path
# cp es-query_bash_completion ~/.local/share/bash-completion/completions/
source ~/.es-query/es-query_bash_completion

USAGE="Usage: $0 <option get|put|post|del|env> <command>"
EXAMPLE="Example: $0 get _cat/indices"

log() {
    LEVEL=$1
    shift
    MESSAGE=$@

    if [[ $SILENT -eq 1 ]] && [[ $SHOW_ERRORS -eq 0 || $LEVEL != "ERROR" ]]; then
        return 0
    fi

    case $LEVEL in
        ERROR)
            LEVEL="\e[91mERROR\e[0m"
            ;;
        INFO)
            LEVEL=" \e[92mINFO\e[0m"
            ;;
        WARN)
            LEVEL=" \e[93mWARN\e[0m"
            ;;
        *)
            ;;
    esac

    printf "$(date) | "
    printf "$LEVEL : "
    printf "$MESSAGE\n"
}

if [[ "$#" -lt 1 ]]; then
	log "ERROR" "Too few arguments. ❌"
  echo ""
	echo "$USAGE"
  echo "$EXAMPLE"
	exit 1
fi

## test URL
HTTPS="https"
function test_url {
  curl -o /dev/null -s -w "%{http_code}\n" -k "https://$URL"
}

if [ "$(test_url)" == "000" ]; then
  HTTPS="http"
fi
## function with jquery
function es_request {
  curl -s -H "Content-Type: application/json" -k -u "$USERNAME":"$PASSWORD" -"$1" "$HTTPS://$URL/$2" | jq
}

## function without jquery
function request {
  curl -s -H "Content-Type: application/json" -k -u "$USERNAME":"$PASSWORD" -"$1" "$HTTPS://$URL/$2"
}

## function GET|PUT|POST with json file
function p_request {
  curl -s -H "Content-Type: application/json" -k -u "$USERNAME":"$PASSWORD" -"$1" "$HTTPS://$URL/$2" -d @"$3" | jq
}

## function set env
function set_env {
  log "INFO" "Changing environment credentials to '$QUERY'"
  rm "${HOME}"/.es-query/.env
  ln -s "${HOME}"/.es-query/.env."$QUERY" "${HOME}"/.es-query/.env
  log "INFO" "Done ✅"
}

## variables to work in requests
COMMAND=$1
QUERY=$2
OPTION=$3

## options use
case $COMMAND in
GET | get)
  QUERY=$2
  OPTION=$3
  # use query wihtout jq when doing _cat requests 
  if [[ "$QUERY" =~ _cat/.*$ ]]; then
    request XGET "$QUERY"
  elif [ -z "$OPTION" ]; then
    # get request with no options
    es_request XGET "$QUERY"
  else
    # get request with options
    p_request XGET "$QUERY" "$OPTION"
  fi
  ;;
PUT | put)
  # put request needs options
  if [ -z "$OPTION" ]; then
    echo "Error, argument needed"
  else
    p_request "$COMMAND" "$QUERY" "$OPTION"
  fi
  ;;
POST | post)
  # do_option_2
  if [ -z "$OPTION" ]; then
    echo "Error, argument needed"
  else
    p_request "$COMMAND" "$QUERY" "$OPTION"
  fi
  ;;
DELETE | del | delete)
  # do_option_2
  request XDELETE "$QUERY"
  ;;
ENV | env)
  # set environmet
  if [ -z "$QUERY" ]; then
    echo "Showing available connections"
    echo ""
    os="$OSTYPE"
    if [[ "$os" == *linux* ]]; then
      ENVLIST=$(ls -Gn ~/.es-query/.env* |cut -d ' ' -f 8-)
      echo "$ENVLIST"
      echo ""
    elif [[ "$os" == *darwin** ]]; then
      ENVLIST=$(ls -Gn ~/.es-query/.env* |cut -d ' ' -f 12-)
      echo "$ENVLIST"
      echo ""
    fi
  else
    set_env "$QUERY"
  fi
  ;;
help)
  echo "Usage GET PUT POST DELETE ENV"
  ;;
indices)
  request XGET _cat/indices/*,-.*?pretty=true
  ;;
shards)
  request XGET _cat/shards?pretty=true
  ;;
v | version)
  echo "Version $VERSION"
  ;;
*)
  echo "=============================================="
  echo ""
  log "ERROR" "Wrong option, use get|put|post|del|env"
  echo ""
  echo "Elastic Usage:"
  echo ""
  echo "$EXAMPLE"
  echo ""
  echo "=============================================="
  echo ""
  echo "Credentials Usage:"
  echo ""
  echo "For setting file ~/.es-query/.env.remote"
  echo "Do: "
  echo ""
  echo "esq env remote"
  echo ""
  echo "=============================================="
  ;;
esac
shift
